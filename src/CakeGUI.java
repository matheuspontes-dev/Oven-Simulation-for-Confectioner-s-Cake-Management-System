package CakeOvenManagementSystem;

import java.time.LocalDate;
import java.time.format.DateTimeParseException;

// The cake oven's graphical interface window
public class CakeGUI extends javax.swing.JFrame {

    // Handles all the cake operations
    CakeInterface si;
    
    // Sets up the window and cake system
    public CakeGUI() {
        si = new MyCake();  // Create the oven system
        initComponents();    // Set up buttons/displays
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldProduct = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaDisplay = new javax.swing.JTextArea();
        jButtonAdd = new javax.swing.JButton();
        jButtomCount = new javax.swing.JButton();
        jButtonRemoveAll = new javax.swing.JButton();
        jButtonRemoveFront = new javax.swing.JButton();
        jButtonListCakes = new javax.swing.JButton();
        jButtonExit = new javax.swing.JButton();
        jButtonRemoveOpposite = new javax.swing.JButton();
        jTextFieldWeight = new javax.swing.JTextField();
        jTextFieldExpiry = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButtonPeek = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Cake Oven Management System");

        jLabel2.setText("Cake Name:");

        jTextFieldProduct.setText("Vanilla");
        jTextFieldProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldProductActionPerformed(evt);
            }
        });

        jTextAreaDisplay.setColumns(20);
        jTextAreaDisplay.setRows(5);
        jScrollPane1.setViewportView(jTextAreaDisplay);

        jButtonAdd.setText("Add Cake");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jButtomCount.setText("Count Cakes");
        jButtomCount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtomCountActionPerformed(evt);
            }
        });

        jButtonRemoveAll.setText("Remove All");
        jButtonRemoveAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveAllActionPerformed(evt);
            }
        });

        jButtonRemoveFront.setText("Remove (Front)");
        jButtonRemoveFront.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveFrontActionPerformed(evt);
            }
        });

        jButtonListCakes.setText("List Cakes");
        jButtonListCakes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListCakesActionPerformed(evt);
            }
        });

        jButtonExit.setText("Exit");
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });

        jButtonRemoveOpposite.setText("Remove (Opposite)");
        jButtonRemoveOpposite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveOppositeActionPerformed(evt);
            }
        });

        jTextFieldWeight.setText("200");
        jTextFieldWeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldWeightActionPerformed(evt);
            }
        });

        jTextFieldExpiry.setText("(Today + 7 days)");
        jTextFieldExpiry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldExpiryActionPerformed(evt);
            }
        });

        jLabel3.setText("Weight (g):");

        jLabel4.setText("Best Before (YYYY-MM-DD):");

        jButtonPeek.setText("Peek Cake");
        jButtonPeek.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPeekActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldExpiry, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(jLabel1))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonRemoveFront, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                            .addComponent(jButtonAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonRemoveOpposite)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonRemoveAll, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonExit))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtomCount)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonListCakes, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonPeek, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextFieldExpiry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtomCount)
                    .addComponent(jButtonAdd)
                    .addComponent(jButtonListCakes)
                    .addComponent(jButtonPeek))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonRemoveFront)
                    .addComponent(jButtonRemoveOpposite)
                    .addComponent(jButtonRemoveAll)
                    .addComponent(jButtonExit))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        try {
    // Get user input from text fields
    String name = jTextFieldProduct.getText().trim();
    int weight = Integer.parseInt(jTextFieldWeight.getText().trim());
    LocalDate bestBefore = LocalDate.parse(jTextFieldExpiry.getText().trim());
    
    // Validate cake name
    if (name.isEmpty()) {
        jTextAreaDisplay.append("ERROR: Please enter a cake name\n");
        return;
    }
    
    // Validate weight (must be positive)
    if (weight <= 0) {
        jTextAreaDisplay.append("ERROR: Weight must be positive\n");
        return;
    }
    
    // Validate expiry date (max 2 weeks in future)
    if (bestBefore.isAfter(LocalDate.now().plusWeeks(2))) {
        jTextAreaDisplay.append("ERROR: Best-before date cannot exceed 2 weeks\n");
        return;
    }
    
    // Check oven capacity and add cake if space available
    if (si.isFull()) {
        jTextAreaDisplay.append("OVEN IS FULL! Cannot add more cakes.\n");
    } else {
        Cake newCake = new Cake(name, weight, bestBefore);
        si.push(newCake);
        jTextAreaDisplay.append("ADDED: " + newCake + "\n");
    }
    
} catch (NumberFormatException e) {
    jTextAreaDisplay.append("ERROR: Invalid weight format\n");
} catch (DateTimeParseException e) {
    jTextAreaDisplay.append("ERROR: Invalid date format (use YYYY-MM-DD)\n");
}

    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jButtomCountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtomCountActionPerformed
        int count = si.size();
    jTextAreaDisplay.append("There are " + count + " cakes in the oven\n");
    if (count >= 5) {
        jTextAreaDisplay.append("OVEN IS AT FULL CAPACITY!\n");
    }
    }//GEN-LAST:event_jButtomCountActionPerformed

    private void jButtonRemoveAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveAllActionPerformed
        si.emptyStack();
    jTextAreaDisplay.append("All cakes removed from oven!\n");
    }//GEN-LAST:event_jButtonRemoveAllActionPerformed

    private void jButtonRemoveFrontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveFrontActionPerformed
        Cake removedCake = (Cake) si.pop();
    if (removedCake != null) {
        jTextAreaDisplay.append("REMOVED (FRONT DOOR): " + removedCake + "\n");
    } else {
        jTextAreaDisplay.append("OVEN IS EMPTY!\n");
    }
    }//GEN-LAST:event_jButtonRemoveFrontActionPerformed

    private void jButtonListCakesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListCakesActionPerformed
        jTextAreaDisplay.append("--- CAKES IN OVEN ---\n" + si.displayStack() + "\n");
    }//GEN-LAST:event_jButtonListCakesActionPerformed

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
         System.exit(0);
    }//GEN-LAST:event_jButtonExitActionPerformed

    private void jTextFieldProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldProductActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldProductActionPerformed

    private void jButtonRemoveOppositeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveOppositeActionPerformed
       Cake removedCake = (Cake) si.removeFromOppositeDoor();
    if (removedCake != null) {
        jTextAreaDisplay.append("REMOVED (OPPOSITE DOOR): " + removedCake + "\n");
    } else {
        jTextAreaDisplay.append("OVEN IS EMPTY!\n");
    }   
    }//GEN-LAST:event_jButtonRemoveOppositeActionPerformed

    private void jTextFieldWeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldWeightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldWeightActionPerformed

    private void jTextFieldExpiryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldExpiryActionPerformed
        if (jTextFieldExpiry.getText().equals("(Today + 7 days)")) {
        jTextFieldExpiry.setText(LocalDate.now().plusDays(7).toString());
    }
    }//GEN-LAST:event_jTextFieldExpiryActionPerformed

    private void jButtonPeekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPeekActionPerformed
        Cake topCake = (Cake) si.peek();
    if (topCake != null) {
        jTextAreaDisplay.append("TOP CAKE: " + topCake + "\n");
    } else {
        jTextAreaDisplay.append("OVEN IS EMPTY!\n");
    }
    }//GEN-LAST:event_jButtonPeekActionPerformed

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CakeGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtomCount;
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonListCakes;
    private javax.swing.JButton jButtonPeek;
    private javax.swing.JButton jButtonRemoveAll;
    private javax.swing.JButton jButtonRemoveFront;
    private javax.swing.JButton jButtonRemoveOpposite;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaDisplay;
    private javax.swing.JTextField jTextFieldExpiry;
    private javax.swing.JTextField jTextFieldProduct;
    private javax.swing.JTextField jTextFieldWeight;
    // End of variables declaration//GEN-END:variables
}
